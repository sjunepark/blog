---
import { getCollection } from "astro:content";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import ArticleLayout from "../../layouts/ArticleLayout.astro";
import Counter from "@components/posts/Counter.svelte";
import CountView from "@components/posts/CountView.svelte";

import Tag from "@components/posts/Tag.svelte";

import { format } from "@formkit/tempo";

export const getStaticPaths = (async () => {
  const posts = await getCollection("post");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
// type Props = CollectionEntry<"post">;

const post = Astro.props as Props;
const { pubDate, updatedDate, title, description, tags, id } = post.data;
const { Content } = await post.render();
---

<DefaultLayout {title} {description}>
  <ArticleLayout>
    <!-- Title -->
    <header class="flex flex-col">
      <h1 class="!mb-6">{title}</h1>
      <div
        class="order-first mb-3 flex items-end justify-between text-base text-muted-foreground"
      >
        <div class="flex flex-col items-start gap-1.5 border-l-2 pl-3">
          <time datetime={format(pubDate, "YYYY-MM-DD", "en")} class="">
            <span>Published: {format(pubDate, "long")}</span>
          </time>
          <time datetime={format(pubDate, "YYYY-MM-DD", "en")} class="">
            <span>Last updated: {format(updatedDate, "long")}</span>
          </time>
        </div>
        <div class="pr-3"><CountView client:load postId={id} /></div>
      </div>
    </header>
    <div class="flex flex-wrap gap-1.5">
      {tags.sort().map((tag) => <Tag type="redirect" {tag} client:load />)}
    </div>

    <!-- Counter -->
    <Counter postId={id} client:only="svelte" />

    <!-- Post -->
    <div class="">
      <Content />
    </div>
  </ArticleLayout>
</DefaultLayout>
